javascript:void(function () {
  // Create Scanner UI
  let scannerUI = document.createElement('div');
  scannerUI.style.cssText =
    'position:fixed;bottom:0;left:0;width:100%;height:400px;background:#1a1a1a;color:#00ff00;z-index:999999;padding:10px;overflow:auto;font-family:monospace;';
  scannerUI.innerHTML = `
    <h3 style="color:#00ff00; margin-bottom:10px;">üîç Advanced OWASP Scanner</h3>
    <div>
      <button id="show-urls" style="margin-right:5px;padding:5px;background:#333;color:#00ff00;border:none;border-radius:3px;cursor:pointer;">Show URLs</button>
      <button id="show-endpoints" style="margin-right:5px;padding:5px;background:#333;color:#00ff00;border:none;border-radius:3px;cursor:pointer;">Show Endpoints</button>
      <button id="show-ips" style="margin-right:5px;padding:5px;background:#333;color:#00ff00;border:none;border-radius:3px;cursor:pointer;">Show IPs</button>
      <button id="show-forms" style="margin-right:5px;padding:5px;background:#333;color:#00ff00;border:none;border-radius:3px;cursor:pointer;">Show Forms</button>
      <button id="show-headers" style="margin-right:5px;padding:5px;background:#333;color:#00ff00;border:none;border-radius:3px;cursor:pointer;">Show Headers</button>
      <button id="show-xss" style="margin-right:5px;padding:5px;background:#ff6600;color:#fff;border:none;border-radius:3px;cursor:pointer;">Check XSS</button>
      <button id="close-scanner" style="padding:5px;background:#ff0000;color:#fff;border:none;border-radius:3px;cursor:pointer;">Close</button>
    </div>
    <div id="scanner-results" style="margin-top:10px; max-height:300px; overflow:auto;"></div>
  `;
  document.body.appendChild(scannerUI);

  // Close Scanner
  document.getElementById('close-scanner').onclick = () => {
    document.body.removeChild(scannerUI);
  };

  // Utility to Add Results
  function addResult(category, results) {
    let container = document.createElement('div');
    container.style.display = 'none';
    container.id = `category-${category}`;
    container.innerHTML = `
      <div style="margin-bottom:10px;">
        <button style="padding:5px;background:#444;color:#00ff00;border:none;border-radius:3px;cursor:pointer;" onclick="downloadData('${category}')">Download ${category.toUpperCase()}</button>
        <button style="padding:5px;background:#444;color:#ff0000;border:none;border-radius:3px;cursor:pointer;" onclick="deleteData('${category}')">Clear</button>
      </div>
    `;
    results.forEach((item) => {
      let resultDiv = document.createElement('div');
      resultDiv.style.cssText =
        'color:white;margin:5px 0;padding:5px;background:#333;border-radius:3px;word-break:break-word;';
      resultDiv.innerText = item;
      container.appendChild(resultDiv);
    });
    document.getElementById('scanner-results').appendChild(container);
  }

  // Data Extraction Functions
  let urls = new Set();
  let endpoints = new Set();
  let ips = new Set();
  let forms = new Set();
  let headers = [];
  let xssVulnerableForms = [];
  let content = document.documentElement.innerHTML;

  async function extractHeaders() {
    try {
      let res = await fetch(window.location.href);
      headers = [...res.headers.entries()];
    } catch (e) {
      headers = [['Error', 'Unable to fetch headers']];
    }
  }

  function extractData() {
    // Extract from HTML elements
    let elements = [
      ...document.getElementsByTagName('a'),
      ...document.getElementsByTagName('script'),
      ...document.getElementsByTagName('img'),
      ...document.getElementsByTagName('link'),
      ...document.getElementsByTagName('form'),
    ];

    elements.forEach((el) => {
      if (el.href) urls.add(el.href);
      if (el.src) urls.add(el.src);
      if (el.action) endpoints.add(el.action);
      if (el.tagName === 'FORM') forms.add(el.outerHTML);
    });

    // Extract from inline content
    let urlRegex = /(?:url\(|href=|src=|action=)['"]?([^'"\s\)]+)/gi;
    let ipRegex = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
    let match;

    while ((match = urlRegex.exec(content)) !== null) {
      if (match[1].startsWith('http')) {
        urls.add(match[1]);
      } else {
        endpoints.add(match[1]);
      }
    }

    let ipMatches = content.match(ipRegex);
    if (ipMatches) {
      ipMatches.forEach((ip) => ips.add(ip));
    }
  }

  function checkXSS() {
    forms.forEach((formHtml) => {
      let parser = new DOMParser();
      let form = parser.parseFromString(formHtml, 'text/html').querySelector('form');
      if (form && form.action && !form.method.toLowerCase().includes('post')) {
        xssVulnerableForms.push(`Potential XSS in Form Action: ${form.action}`);
      }
    });
  }

  // Run Extraction
  extractData();
  extractHeaders().then(() => {
    addResult('headers', headers.map(([key, value]) => `${key}: ${value}`));
  });

  // Add Results to UI
  addResult('urls', Array.from(urls));
  addResult('endpoints', Array.from(endpoints));
  addResult('ips', Array.from(ips));
  addResult('forms', Array.from(forms));

  // Button Actions
  document.getElementById('show-urls').onclick = () => toggleCategory('urls');
  document.getElementById('show-endpoints').onclick = () =>
    toggleCategory('endpoints');
  document.getElementById('show-ips').onclick = () => toggleCategory('ips');
  document.getElementById('show-forms').onclick = () => toggleCategory('forms');
  document.getElementById('show-headers').onclick = () =>
    toggleCategory('headers');
  document.getElementById('show-xss').onclick = () => {
    checkXSS();
    addResult('xss', xssVulnerableForms);
    toggleCategory('xss');
  };

  function toggleCategory(category) {
    let container = document.getElementById(`category-${category}`);
    let isVisible = container.style.display === 'block';
    document
      .querySelectorAll('#scanner-results > div')
      .forEach((div) => (div.style.display = 'none'));
    if (!isVisible) container.style.display = 'block';
  }

  // Download Data
  window.downloadData = function (category) {
    let data = Array.from(
      document
        .getElementById(`category-${category}`)
        .querySelectorAll('div:not(:first-child)')
    ).map((div) => div.innerText);
    let blob = new Blob([data.join('\n')], { type: 'text/plain' });
    let a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = `${category}.txt`;
    a.click();
  };

  // Delete Data
  window.deleteData = function (category) {
    let container = document.getElementById(`category-${category}`);
    container.innerHTML = '<div>No data available.</div>';
  };
})();
